// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ETModel {

  /// <summary>Holder for reflection information generated from GameProto.proto</summary>
  public static partial class GameProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for GameProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9HYW1lUHJvdG8ucHJvdG8SB0VUTW9kZWwiPgoKT2JqZWN0SW5mbxILCgNL",
            "ZXkYASABKAMSEgoKSW5zdGFuY2VJZBgCIAEoAxIPCgdBZGRyZXNzGAMgASgJ",
            "Ih8KB0F0dHJJbnQSCQoBSxgBIAEoBRIJCgFWGAIgASgDIh8KB0F0dHJTdHIS",
            "CQoBSxgBIAEoBRIJCgFWGAIgASgJIlwKClNlcnZlckluZm8SEAoIU2VydmVy",
            "SWQYASABKAUSEgoKU2VydmVyVHlwZRgCIAEoBRISCgpOZXRJbm5lcklwGAMg",
            "ASgJEhQKDE5ldElubmVyUG9ydBgEIAEoBSJkCgpSb2xlRGJJbmZvEg4KBlJv",
            "bGVJZBgBIAEoBRIiCghBdHRySW50cxgCIAMoCzIQLkVUTW9kZWwuQXR0cklu",
            "dBIiCghBdHRyU3RycxgDIAMoCzIQLkVUTW9kZWwuQXR0clN0ciI8Cg1BY3Rv",
            "clJlc3BvbnNlEgsKA1RhZxhiIAEoBRINCgVScGNJZBhjIAEoBRIPCgdNZXNz",
            "YWdlGGQgASgJIj4KD1Jlc3BvbnNlTWVzc2FnZRILCgNUYWcYYiABKAUSDQoF",
            "UnBjSWQYYyABKAUSDwoHTWVzc2FnZRhkIAEoCSJEChBPYmplY3RBZGRSZXF1",
            "ZXN0EiEKBEl0ZW0YASABKAsyEy5FVE1vZGVsLk9iamVjdEluZm8SDQoFUnBj",
            "SWQYYyABKAUiQAoRT2JqZWN0QWRkUmVzcG9uc2USCwoDVGFnGGIgASgFEg0K",
            "BVJwY0lkGGMgASgFEg8KB01lc3NhZ2UYZCABKAkiMQoTT2JqZWN0UmVtb3Zl",
            "UmVxdWVzdBILCgNLZXkYASABKAMSDQoFUnBjSWQYYyABKAUiQwoUT2JqZWN0",
            "UmVtb3ZlUmVzcG9uc2USCwoDVGFnGGIgASgFEg0KBVJwY0lkGGMgASgFEg8K",
            "B01lc3NhZ2UYZCABKAkiUwoRT2JqZWN0TG9ja1JlcXVlc3QSIQoESXRlbRgB",
            "IAEoCzITLkVUTW9kZWwuT2JqZWN0SW5mbxIMCgRUaW1lGAIgASgFEg0KBVJw",
            "Y0lkGGMgASgFIkEKEk9iamVjdExvY2tSZXNwb25zZRILCgNUYWcYYiABKAUS",
            "DQoFUnBjSWQYYyABKAUSDwoHTWVzc2FnZRhkIAEoCSJcChNPYmplY3RVbkxv",
            "Y2tSZXF1ZXN0EgsKA0tleRgBIAEoAxIVCg1PbGRJbnN0YW5jZUlkGAIgASgD",
            "EhIKCkluc3RhbmNlSWQYAyABKAMSDQoFUnBjSWQYYyABKAUiQwoUT2JqZWN0",
            "VW5Mb2NrUmVzcG9uc2USCwoDVGFnGGIgASgFEg0KBVJwY0lkGGMgASgFEg8K",
            "B01lc3NhZ2UYZCABKAkiLgoQT2JqZWN0R2V0UmVxdWVzdBILCgNLZXkYASAB",
            "KAMSDQoFUnBjSWQYYyABKAUiYwoRT2JqZWN0R2V0UmVzcG9uc2USIQoESXRl",
            "bRgBIAEoCzITLkVUTW9kZWwuT2JqZWN0SW5mbxILCgNUYWcYYiABKAUSDQoF",
            "UnBjSWQYYyABKAUSDwoHTWVzc2FnZRhkIAEoCSI1Cg9DMldFQl9Vc2VyTG9n",
            "aW4SEAoIVXNlck5hbWUYASABKAkSEAoIVXNlclBhc3MYAiABKAkiggEKD1dF",
            "QjJDX1VzZXJMb2dpbhILCgN0YWcYASABKAUSEQoJQWNjb3VudElkGAIgASgF",
            "EhQKDElzQ3JlYXRlUm9sZRgDIAEoCBIRCglUaW1lc3RhbXAYBCABKAMSCgoC",
            "SXAYBSABKAkSDAoEUG9ydBgGIAEoBRIMCgRTaWduGAcgASgJIlgKEEMyV0VC",
            "X0NyZWF0ZVJvbGUSEQoJQWNjb3VudElkGAEgASgFEhAKCFJvbGVOYW1lGAIg",
            "ASgJEhEKCVRpbWVzdGFtcBgDIAEoAxIMCgRTaWduGAQgASgJIoMBChBXRUIy",
            "Q19DcmVhdGVSb2xlEgsKA3RhZxgBIAEoBRIRCglBY2NvdW50SWQYAiABKAUS",
            "FAoMSXNDcmVhdGVSb2xlGAMgASgIEhEKCVRpbWVzdGFtcBgEIAEoAxIKCgJJ",
            "cBgFIAEoCRIMCgRQb3J0GAYgASgFEgwKBHNpZ24YByABKAkiUgoNQzJTX1Vz",
            "ZXJMb2dpbhIRCglBY2NvdW50SWQYASABKAUSEQoJVGltZXN0YW1wGAIgASgD",
            "EgwKBHNpZ24YAyABKAkSDQoFUnBjSWQYYyABKAUiTAoNUzJDX1VzZXJMb2dp",
            "bhIOCgZVbml0SWQYASABKAMSCwoDVGFnGGIgASgFEg0KBVJwY0lkGGMgASgF",
            "Eg8KB01lc3NhZ2UYZCABKAkiMAoMU2F2ZVJvbGVJbmZvEg4KBlJvbGVJZBgB",
            "IAEoBRIQCghSb2xlRGF0YRgCIAEoDCJmCgxTMkNfUm9sZUluZm8SDgoGUm9s",
            "ZUlkGAEgASgFEiIKCEF0dHJJbnRzGAIgAygLMhAuRVRNb2RlbC5BdHRySW50",
            "EiIKCEF0dHJTdHJzGAMgAygLMhAuRVRNb2RlbC5BdHRyU3RyIl0KC1NlcnZl",
            "ckhlYXJ0EhAKCFNlcnZlcklkGAEgASgFEhIKClNlcnZlck5hbWUYAiABKAkS",
            "CgoCSXAYAyABKAkSDAoEUG9ydBgEIAEoBRIOCgZPbmxpbmUYBSABKAUiRgoS",
            "UzJMX1JlZ2lzdGVyU2VydmVyEiEKBEluZm8YASABKAsyEy5FVE1vZGVsLlNl",
            "cnZlckluZm8SDQoFUnBjSWQYYyABKAUiSQoORzJNX0NyZWF0ZVVuaXQSEQoJ",
            "QWNjb3VudElkGAEgASgFEhUKDUdhdGVTZXNzaW9uSWQYAiABKAMSDQoFUnBj",
            "SWQYYyABKAUiTQoOTTJHX0NyZWF0ZVVuaXQSDgoGVW5pdElkGAEgASgDEgsK",
            "A1RhZxhiIAEoBRINCgVScGNJZBhjIAEoBRIPCgdNZXNzYWdlGGQgASgJIjMK",
            "EUcyTF9HZXRNYXBBZGRyZXNzEg8KB01hcFR5cGUYASABKAUSDQoFUnBjSWQY",
            "YyABKAUiUQoRTDJHX0dldE1hcEFkZHJlc3MSDwoHQWRkcmVzcxgBIAEoCRIL",
            "CgNUYWcYYiABKAUSDQoFUnBjSWQYYyABKAUSDwoHTWVzc2FnZRhkIAEoCSJR",
            "Cg1DMk1fRW50ZXJSb29tEhAKCFJvb21UeXBlGAEgASgFEg4KBlJvb21JZBgC",
            "IAEoBRINCgVScGNJZBhjIAEoBRIPCgdBY3RvcklkGGQgASgDIkwKDU0yQ19F",
            "bnRlclJvb20SDgoGUm9vbUlkGAEgASgFEgsKA1RhZxhiIAEoBRINCgVScGNJ",
            "ZBhjIAEoBRIPCgdNZXNzYWdlGGQgASgJIjEKD0cyTV9Vbml0RGlzcG9zZRIN",
            "CgVScGNJZBhjIAEoBRIPCgdBY3RvcklkGGQgASgDKqEFCgNNU0cSDAoIX0Rl",
            "ZmF1bHQQABISCg5fQWN0b3JSZXNwb25zZRAeEhQKEF9SZXNwb25zZU1lc3Nh",
            "Z2UQARIVChFfT2JqZWN0QWRkUmVxdWVzdBAUEhYKEl9PYmplY3RBZGRSZXNw",
            "b25zZRAVEhgKFF9PYmplY3RSZW1vdmVSZXF1ZXN0EBYSGQoVX09iamVjdFJl",
            "bW92ZVJlc3BvbnNlEBcSFgoSX09iamVjdExvY2tSZXF1ZXN0EBgSFwoTX09i",
            "amVjdExvY2tSZXNwb25zZRAZEhgKFF9PYmplY3RVbkxvY2tSZXF1ZXN0EBoS",
            "GQoVX09iamVjdFVuTG9ja1Jlc3BvbnNlEBsSFQoRX09iamVjdEdldFJlcXVl",
            "c3QQHBIWChJfT2JqZWN0R2V0UmVzcG9uc2UQHRIUChBfQzJXRUJfVXNlckxv",
            "Z2luEAISFAoQX1dFQjJDX1VzZXJMb2dpbhADEhUKEV9DMldFQl9DcmVhdGVS",
            "b2xlEAQSFQoRX1dFQjJDX0NyZWF0ZVJvbGUQBRISCg5fQzJTX1VzZXJMb2dp",
            "bhAGEhIKDl9TMkNfVXNlckxvZ2luEAcSEQoNX1NhdmVSb2xlSW5mbxAIEhEK",
            "DV9TMkNfUm9sZUluZm8QCRIQCgxfU2VydmVySGVhcnQQChIXChNfUzJMX1Jl",
            "Z2lzdGVyU2VydmVyEAsSEwoPX0cyTV9DcmVhdGVVbml0EAwSEwoPX00yR19D",
            "cmVhdGVVbml0EA0SFgoSX0cyTF9HZXRNYXBBZGRyZXNzEA4SFgoSX0wyR19H",
            "ZXRNYXBBZGRyZXNzEA8SEgoOX0MyTV9FbnRlclJvb20QEhISCg5fTTJDX0Vu",
            "dGVyUm9vbRATEhQKEF9HMk1fVW5pdERpc3Bvc2UQH2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ETModel.MSG), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectInfo), global::ETModel.ObjectInfo.Parser, new[]{ "Key", "InstanceId", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.AttrInt), global::ETModel.AttrInt.Parser, new[]{ "K", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.AttrStr), global::ETModel.AttrStr.Parser, new[]{ "K", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ServerInfo), global::ETModel.ServerInfo.Parser, new[]{ "ServerId", "ServerType", "NetInnerIp", "NetInnerPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.RoleDbInfo), global::ETModel.RoleDbInfo.Parser, new[]{ "RoleId", "AttrInts", "AttrStrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ActorResponse), global::ETModel.ActorResponse.Parser, new[]{ "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ResponseMessage), global::ETModel.ResponseMessage.Parser, new[]{ "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectAddRequest), global::ETModel.ObjectAddRequest.Parser, new[]{ "Item", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectAddResponse), global::ETModel.ObjectAddResponse.Parser, new[]{ "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectRemoveRequest), global::ETModel.ObjectRemoveRequest.Parser, new[]{ "Key", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectRemoveResponse), global::ETModel.ObjectRemoveResponse.Parser, new[]{ "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectLockRequest), global::ETModel.ObjectLockRequest.Parser, new[]{ "Item", "Time", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectLockResponse), global::ETModel.ObjectLockResponse.Parser, new[]{ "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectUnLockRequest), global::ETModel.ObjectUnLockRequest.Parser, new[]{ "Key", "OldInstanceId", "InstanceId", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectUnLockResponse), global::ETModel.ObjectUnLockResponse.Parser, new[]{ "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectGetRequest), global::ETModel.ObjectGetRequest.Parser, new[]{ "Key", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ObjectGetResponse), global::ETModel.ObjectGetResponse.Parser, new[]{ "Item", "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.C2WEB_UserLogin), global::ETModel.C2WEB_UserLogin.Parser, new[]{ "UserName", "UserPass" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.WEB2C_UserLogin), global::ETModel.WEB2C_UserLogin.Parser, new[]{ "Tag", "AccountId", "IsCreateRole", "Timestamp", "Ip", "Port", "Sign" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.C2WEB_CreateRole), global::ETModel.C2WEB_CreateRole.Parser, new[]{ "AccountId", "RoleName", "Timestamp", "Sign" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.WEB2C_CreateRole), global::ETModel.WEB2C_CreateRole.Parser, new[]{ "Tag", "AccountId", "IsCreateRole", "Timestamp", "Ip", "Port", "Sign" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.C2S_UserLogin), global::ETModel.C2S_UserLogin.Parser, new[]{ "AccountId", "Timestamp", "Sign", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.S2C_UserLogin), global::ETModel.S2C_UserLogin.Parser, new[]{ "UnitId", "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.SaveRoleInfo), global::ETModel.SaveRoleInfo.Parser, new[]{ "RoleId", "RoleData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.S2C_RoleInfo), global::ETModel.S2C_RoleInfo.Parser, new[]{ "RoleId", "AttrInts", "AttrStrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.ServerHeart), global::ETModel.ServerHeart.Parser, new[]{ "ServerId", "ServerName", "Ip", "Port", "Online" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.S2L_RegisterServer), global::ETModel.S2L_RegisterServer.Parser, new[]{ "Info", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.G2M_CreateUnit), global::ETModel.G2M_CreateUnit.Parser, new[]{ "AccountId", "GateSessionId", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.M2G_CreateUnit), global::ETModel.M2G_CreateUnit.Parser, new[]{ "UnitId", "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.G2L_GetMapAddress), global::ETModel.G2L_GetMapAddress.Parser, new[]{ "MapType", "RpcId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.L2G_GetMapAddress), global::ETModel.L2G_GetMapAddress.Parser, new[]{ "Address", "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.C2M_EnterRoom), global::ETModel.C2M_EnterRoom.Parser, new[]{ "RoomType", "RoomId", "RpcId", "ActorId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.M2C_EnterRoom), global::ETModel.M2C_EnterRoom.Parser, new[]{ "RoomId", "Tag", "RpcId", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ETModel.G2M_UnitDispose), global::ETModel.G2M_UnitDispose.Parser, new[]{ "RpcId", "ActorId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MSG {
    [pbr::OriginalName("_Default")] Default = 0,
    /// <summary>
    ///Actor回复信息
    /// </summary>
    [pbr::OriginalName("_ActorResponse")] ActorResponse = 30,
    /// <summary>
    ///回复信息
    /// </summary>
    [pbr::OriginalName("_ResponseMessage")] ResponseMessage = 1,
    /// <summary>
    ///添加对象
    /// </summary>
    [pbr::OriginalName("_ObjectAddRequest")] ObjectAddRequest = 20,
    /// <summary>
    ///添加对象
    /// </summary>
    [pbr::OriginalName("_ObjectAddResponse")] ObjectAddResponse = 21,
    /// <summary>
    ///删除对象
    /// </summary>
    [pbr::OriginalName("_ObjectRemoveRequest")] ObjectRemoveRequest = 22,
    /// <summary>
    ///删除对象
    /// </summary>
    [pbr::OriginalName("_ObjectRemoveResponse")] ObjectRemoveResponse = 23,
    /// <summary>
    ///锁定对象
    /// </summary>
    [pbr::OriginalName("_ObjectLockRequest")] ObjectLockRequest = 24,
    /// <summary>
    ///锁定对象
    /// </summary>
    [pbr::OriginalName("_ObjectLockResponse")] ObjectLockResponse = 25,
    /// <summary>
    ///取消锁定对象
    /// </summary>
    [pbr::OriginalName("_ObjectUnLockRequest")] ObjectUnLockRequest = 26,
    /// <summary>
    ///取消锁定对象
    /// </summary>
    [pbr::OriginalName("_ObjectUnLockResponse")] ObjectUnLockResponse = 27,
    /// <summary>
    ///获取对象
    /// </summary>
    [pbr::OriginalName("_ObjectGetRequest")] ObjectGetRequest = 28,
    /// <summary>
    ///获取对象
    /// </summary>
    [pbr::OriginalName("_ObjectGetResponse")] ObjectGetResponse = 29,
    /// <summary>
    ///用户登录
    /// </summary>
    [pbr::OriginalName("_C2WEB_UserLogin")] C2WebUserLogin = 2,
    /// <summary>
    ///用户登录返回
    /// </summary>
    [pbr::OriginalName("_WEB2C_UserLogin")] Web2CUserLogin = 3,
    /// <summary>
    ///创建角色
    /// </summary>
    [pbr::OriginalName("_C2WEB_CreateRole")] C2WebCreateRole = 4,
    /// <summary>
    ///用户登录返回
    /// </summary>
    [pbr::OriginalName("_WEB2C_CreateRole")] Web2CCreateRole = 5,
    /// <summary>
    ///用户登录
    /// </summary>
    [pbr::OriginalName("_C2S_UserLogin")] C2SUserLogin = 6,
    /// <summary>
    ///用户登录返回
    /// </summary>
    [pbr::OriginalName("_S2C_UserLogin")] S2CUserLogin = 7,
    /// <summary>
    ///读取用户信息
    /// </summary>
    [pbr::OriginalName("_SaveRoleInfo")] SaveRoleInfo = 8,
    /// <summary>
    ///通知用户信息发生变化
    /// </summary>
    [pbr::OriginalName("_S2C_RoleInfo")] S2CRoleInfo = 9,
    /// <summary>
    ///服务器心跳
    /// </summary>
    [pbr::OriginalName("_ServerHeart")] ServerHeart = 10,
    /// <summary>
    ///注册服务器
    /// </summary>
    [pbr::OriginalName("_S2L_RegisterServer")] S2LRegisterServer = 11,
    /// <summary>
    ///通知地图服务器创建unit
    /// </summary>
    [pbr::OriginalName("_G2M_CreateUnit")] G2MCreateUnit = 12,
    /// <summary>
    ///通知地图服务器创建unit
    /// </summary>
    [pbr::OriginalName("_M2G_CreateUnit")] M2GCreateUnit = 13,
    /// <summary>
    ///获取指定类型map 的地址
    /// </summary>
    [pbr::OriginalName("_G2L_GetMapAddress")] G2LGetMapAddress = 14,
    /// <summary>
    ///通知地图服务器创建unit
    /// </summary>
    [pbr::OriginalName("_L2G_GetMapAddress")] L2GGetMapAddress = 15,
    /// <summary>
    ///用户进入房间
    /// </summary>
    [pbr::OriginalName("_C2M_EnterRoom")] C2MEnterRoom = 18,
    /// <summary>
    ///用户进入房间
    /// </summary>
    [pbr::OriginalName("_M2C_EnterRoom")] M2CEnterRoom = 19,
    /// <summary>
    ///釋放unit
    /// </summary>
    [pbr::OriginalName("_G2M_UnitDispose")] G2MUnitDispose = 31,
  }

  #endregion

  #region Messages
  /// <summary>
  ///对象信息
  /// </summary>
  public sealed partial class ObjectInfo : pb::IMessage<ObjectInfo> {
    private static readonly pb::MessageParser<ObjectInfo> _parser = new pb::MessageParser<ObjectInfo>(() => new ObjectInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo(ObjectInfo other) : this() {
      key_ = other.key_;
      instanceId_ = other.instanceId_;
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectInfo Clone() {
      return new ObjectInfo(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    /// <summary>
    ///key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "InstanceId" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private long instanceId_;
    /// <summary>
    ///实例编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 3;
    private string address_ = "";
    /// <summary>
    ///地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (InstanceId != other.InstanceId) return false;
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (InstanceId != 0L) hash ^= InstanceId.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (InstanceId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(InstanceId);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (InstanceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InstanceId);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.InstanceId != 0L) {
        InstanceId = other.InstanceId;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 16: {
            InstanceId = input.ReadInt64();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///int属性
  /// </summary>
  public sealed partial class AttrInt : pb::IMessage<AttrInt> {
    private static readonly pb::MessageParser<AttrInt> _parser = new pb::MessageParser<AttrInt>(() => new AttrInt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInt(AttrInt other) : this() {
      k_ = other.k_;
      v_ = other.v_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInt Clone() {
      return new AttrInt(this);
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 1;
    private int k_;
    /// <summary>
    ///key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "V" field.</summary>
    public const int VFieldNumber = 2;
    private long v_;
    /// <summary>
    ///值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (K != other.K) return false;
      if (V != other.V) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (K != 0) hash ^= K.GetHashCode();
      if (V != 0L) hash ^= V.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (K != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(K);
      }
      if (V != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(V);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (V != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(V);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrInt other) {
      if (other == null) {
        return;
      }
      if (other.K != 0) {
        K = other.K;
      }
      if (other.V != 0L) {
        V = other.V;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            K = input.ReadInt32();
            break;
          }
          case 16: {
            V = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///str属性
  /// </summary>
  public sealed partial class AttrStr : pb::IMessage<AttrStr> {
    private static readonly pb::MessageParser<AttrStr> _parser = new pb::MessageParser<AttrStr>(() => new AttrStr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrStr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrStr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrStr(AttrStr other) : this() {
      k_ = other.k_;
      v_ = other.v_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrStr Clone() {
      return new AttrStr(this);
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 1;
    private int k_;
    /// <summary>
    ///key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "V" field.</summary>
    public const int VFieldNumber = 2;
    private string v_ = "";
    /// <summary>
    ///值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string V {
      get { return v_; }
      set {
        v_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrStr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrStr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (K != other.K) return false;
      if (V != other.V) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (K != 0) hash ^= K.GetHashCode();
      if (V.Length != 0) hash ^= V.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (K != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(K);
      }
      if (V.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(V);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (V.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(V);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrStr other) {
      if (other == null) {
        return;
      }
      if (other.K != 0) {
        K = other.K;
      }
      if (other.V.Length != 0) {
        V = other.V;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            K = input.ReadInt32();
            break;
          }
          case 18: {
            V = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器信息
  /// </summary>
  public sealed partial class ServerInfo : pb::IMessage<ServerInfo> {
    private static readonly pb::MessageParser<ServerInfo> _parser = new pb::MessageParser<ServerInfo>(() => new ServerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo(ServerInfo other) : this() {
      serverId_ = other.serverId_;
      serverType_ = other.serverType_;
      netInnerIp_ = other.netInnerIp_;
      netInnerPort_ = other.netInnerPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerInfo Clone() {
      return new ServerInfo(this);
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    /// <summary>
    ///服务器编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "ServerType" field.</summary>
    public const int ServerTypeFieldNumber = 2;
    private int serverType_;
    /// <summary>
    ///服务器类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerType {
      get { return serverType_; }
      set {
        serverType_ = value;
      }
    }

    /// <summary>Field number for the "NetInnerIp" field.</summary>
    public const int NetInnerIpFieldNumber = 3;
    private string netInnerIp_ = "";
    /// <summary>
    ///内部Ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetInnerIp {
      get { return netInnerIp_; }
      set {
        netInnerIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NetInnerPort" field.</summary>
    public const int NetInnerPortFieldNumber = 4;
    private int netInnerPort_;
    /// <summary>
    ///内部端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetInnerPort {
      get { return netInnerPort_; }
      set {
        netInnerPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (ServerType != other.ServerType) return false;
      if (NetInnerIp != other.NetInnerIp) return false;
      if (NetInnerPort != other.NetInnerPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (ServerType != 0) hash ^= ServerType.GetHashCode();
      if (NetInnerIp.Length != 0) hash ^= NetInnerIp.GetHashCode();
      if (NetInnerPort != 0) hash ^= NetInnerPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (ServerType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerType);
      }
      if (NetInnerIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NetInnerIp);
      }
      if (NetInnerPort != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(NetInnerPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (ServerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerType);
      }
      if (NetInnerIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetInnerIp);
      }
      if (NetInnerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetInnerPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.ServerType != 0) {
        ServerType = other.ServerType;
      }
      if (other.NetInnerIp.Length != 0) {
        NetInnerIp = other.NetInnerIp;
      }
      if (other.NetInnerPort != 0) {
        NetInnerPort = other.NetInnerPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 16: {
            ServerType = input.ReadInt32();
            break;
          }
          case 26: {
            NetInnerIp = input.ReadString();
            break;
          }
          case 32: {
            NetInnerPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色数据存储信息
  /// </summary>
  public sealed partial class RoleDbInfo : pb::IMessage<RoleDbInfo> {
    private static readonly pb::MessageParser<RoleDbInfo> _parser = new pb::MessageParser<RoleDbInfo>(() => new RoleDbInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleDbInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDbInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDbInfo(RoleDbInfo other) : this() {
      roleId_ = other.roleId_;
      attrInts_ = other.attrInts_.Clone();
      attrStrs_ = other.attrStrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDbInfo Clone() {
      return new RoleDbInfo(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "AttrInts" field.</summary>
    public const int AttrIntsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ETModel.AttrInt> _repeated_attrInts_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.AttrInt.Parser);
    private readonly pbc::RepeatedField<global::ETModel.AttrInt> attrInts_ = new pbc::RepeatedField<global::ETModel.AttrInt>();
    /// <summary>
    ///角色int属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ETModel.AttrInt> AttrInts {
      get { return attrInts_; }
    }

    /// <summary>Field number for the "AttrStrs" field.</summary>
    public const int AttrStrsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ETModel.AttrStr> _repeated_attrStrs_codec
        = pb::FieldCodec.ForMessage(26, global::ETModel.AttrStr.Parser);
    private readonly pbc::RepeatedField<global::ETModel.AttrStr> attrStrs_ = new pbc::RepeatedField<global::ETModel.AttrStr>();
    /// <summary>
    ///角色int属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ETModel.AttrStr> AttrStrs {
      get { return attrStrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleDbInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleDbInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if(!attrInts_.Equals(other.attrInts_)) return false;
      if(!attrStrs_.Equals(other.attrStrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      hash ^= attrInts_.GetHashCode();
      hash ^= attrStrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      attrInts_.WriteTo(output, _repeated_attrInts_codec);
      attrStrs_.WriteTo(output, _repeated_attrStrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += attrInts_.CalculateSize(_repeated_attrInts_codec);
      size += attrStrs_.CalculateSize(_repeated_attrStrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleDbInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      attrInts_.Add(other.attrInts_);
      attrStrs_.Add(other.attrStrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18: {
            attrInts_.AddEntriesFrom(input, _repeated_attrInts_codec);
            break;
          }
          case 26: {
            attrStrs_.AddEntriesFrom(input, _repeated_attrStrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Actor回复信息
  /// </summary>
  public sealed partial class ActorResponse : pb::IMessage<ActorResponse> {
    private static readonly pb::MessageParser<ActorResponse> _parser = new pb::MessageParser<ActorResponse>(() => new ActorResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorResponse(ActorResponse other) : this() {
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorResponse Clone() {
      return new ActorResponse(this);
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorResponse other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复信息
  /// </summary>
  public sealed partial class ResponseMessage : pb::IMessage<ResponseMessage> {
    private static readonly pb::MessageParser<ResponseMessage> _parser = new pb::MessageParser<ResponseMessage>(() => new ResponseMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessage(ResponseMessage other) : this() {
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessage Clone() {
      return new ResponseMessage(this);
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseMessage other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///添加对象
  /// </summary>
  public sealed partial class ObjectAddRequest : pb::IMessage<ObjectAddRequest> {
    private static readonly pb::MessageParser<ObjectAddRequest> _parser = new pb::MessageParser<ObjectAddRequest>(() => new ObjectAddRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectAddRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddRequest(ObjectAddRequest other) : this() {
      Item = other.item_ != null ? other.Item.Clone() : null;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddRequest Clone() {
      return new ObjectAddRequest(this);
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::ETModel.ObjectInfo item_;
    /// <summary>
    ///对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ETModel.ObjectInfo Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectAddRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectAddRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectAddRequest other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::ETModel.ObjectInfo();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::ETModel.ObjectInfo();
            }
            input.ReadMessage(item_);
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///添加对象
  /// </summary>
  public sealed partial class ObjectAddResponse : pb::IMessage<ObjectAddResponse> {
    private static readonly pb::MessageParser<ObjectAddResponse> _parser = new pb::MessageParser<ObjectAddResponse>(() => new ObjectAddResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectAddResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddResponse(ObjectAddResponse other) : this() {
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectAddResponse Clone() {
      return new ObjectAddResponse(this);
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectAddResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectAddResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectAddResponse other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除对象
  /// </summary>
  public sealed partial class ObjectRemoveRequest : pb::IMessage<ObjectRemoveRequest> {
    private static readonly pb::MessageParser<ObjectRemoveRequest> _parser = new pb::MessageParser<ObjectRemoveRequest>(() => new ObjectRemoveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRemoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRemoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRemoveRequest(ObjectRemoveRequest other) : this() {
      key_ = other.key_;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRemoveRequest Clone() {
      return new ObjectRemoveRequest(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    /// <summary>
    ///对象编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRemoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRemoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectRemoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除对象
  /// </summary>
  public sealed partial class ObjectRemoveResponse : pb::IMessage<ObjectRemoveResponse> {
    private static readonly pb::MessageParser<ObjectRemoveResponse> _parser = new pb::MessageParser<ObjectRemoveResponse>(() => new ObjectRemoveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectRemoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRemoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRemoveResponse(ObjectRemoveResponse other) : this() {
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectRemoveResponse Clone() {
      return new ObjectRemoveResponse(this);
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectRemoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectRemoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectRemoveResponse other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///锁定对象
  /// </summary>
  public sealed partial class ObjectLockRequest : pb::IMessage<ObjectLockRequest> {
    private static readonly pb::MessageParser<ObjectLockRequest> _parser = new pb::MessageParser<ObjectLockRequest>(() => new ObjectLockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectLockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectLockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectLockRequest(ObjectLockRequest other) : this() {
      Item = other.item_ != null ? other.Item.Clone() : null;
      time_ = other.time_;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectLockRequest Clone() {
      return new ObjectLockRequest(this);
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::ETModel.ObjectInfo item_;
    /// <summary>
    ///对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ETModel.ObjectInfo Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 2;
    private int time_;
    /// <summary>
    ///实例ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectLockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectLockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      if (Time != other.Time) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (Time != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Time);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectLockRequest other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::ETModel.ObjectInfo();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::ETModel.ObjectInfo();
            }
            input.ReadMessage(item_);
            break;
          }
          case 16: {
            Time = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///锁定对象
  /// </summary>
  public sealed partial class ObjectLockResponse : pb::IMessage<ObjectLockResponse> {
    private static readonly pb::MessageParser<ObjectLockResponse> _parser = new pb::MessageParser<ObjectLockResponse>(() => new ObjectLockResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectLockResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectLockResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectLockResponse(ObjectLockResponse other) : this() {
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectLockResponse Clone() {
      return new ObjectLockResponse(this);
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectLockResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectLockResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectLockResponse other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///取消锁定对象
  /// </summary>
  public sealed partial class ObjectUnLockRequest : pb::IMessage<ObjectUnLockRequest> {
    private static readonly pb::MessageParser<ObjectUnLockRequest> _parser = new pb::MessageParser<ObjectUnLockRequest>(() => new ObjectUnLockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectUnLockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUnLockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUnLockRequest(ObjectUnLockRequest other) : this() {
      key_ = other.key_;
      oldInstanceId_ = other.oldInstanceId_;
      instanceId_ = other.instanceId_;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUnLockRequest Clone() {
      return new ObjectUnLockRequest(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    /// <summary>
    ///对象编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "OldInstanceId" field.</summary>
    public const int OldInstanceIdFieldNumber = 2;
    private long oldInstanceId_;
    /// <summary>
    ///实例ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OldInstanceId {
      get { return oldInstanceId_; }
      set {
        oldInstanceId_ = value;
      }
    }

    /// <summary>Field number for the "InstanceId" field.</summary>
    public const int InstanceIdFieldNumber = 3;
    private long instanceId_;
    /// <summary>
    ///实例ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectUnLockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectUnLockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (OldInstanceId != other.OldInstanceId) return false;
      if (InstanceId != other.InstanceId) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (OldInstanceId != 0L) hash ^= OldInstanceId.GetHashCode();
      if (InstanceId != 0L) hash ^= InstanceId.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (OldInstanceId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(OldInstanceId);
      }
      if (InstanceId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(InstanceId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (OldInstanceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OldInstanceId);
      }
      if (InstanceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InstanceId);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectUnLockRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.OldInstanceId != 0L) {
        OldInstanceId = other.OldInstanceId;
      }
      if (other.InstanceId != 0L) {
        InstanceId = other.InstanceId;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 16: {
            OldInstanceId = input.ReadInt64();
            break;
          }
          case 24: {
            InstanceId = input.ReadInt64();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///取消锁定对象
  /// </summary>
  public sealed partial class ObjectUnLockResponse : pb::IMessage<ObjectUnLockResponse> {
    private static readonly pb::MessageParser<ObjectUnLockResponse> _parser = new pb::MessageParser<ObjectUnLockResponse>(() => new ObjectUnLockResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectUnLockResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUnLockResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUnLockResponse(ObjectUnLockResponse other) : this() {
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectUnLockResponse Clone() {
      return new ObjectUnLockResponse(this);
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectUnLockResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectUnLockResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectUnLockResponse other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取对象
  /// </summary>
  public sealed partial class ObjectGetRequest : pb::IMessage<ObjectGetRequest> {
    private static readonly pb::MessageParser<ObjectGetRequest> _parser = new pb::MessageParser<ObjectGetRequest>(() => new ObjectGetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectGetRequest(ObjectGetRequest other) : this() {
      key_ = other.key_;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectGetRequest Clone() {
      return new ObjectGetRequest(this);
    }

    /// <summary>Field number for the "Key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    /// <summary>
    ///对象编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectGetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取对象
  /// </summary>
  public sealed partial class ObjectGetResponse : pb::IMessage<ObjectGetResponse> {
    private static readonly pb::MessageParser<ObjectGetResponse> _parser = new pb::MessageParser<ObjectGetResponse>(() => new ObjectGetResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectGetResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectGetResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectGetResponse(ObjectGetResponse other) : this() {
      Item = other.item_ != null ? other.Item.Clone() : null;
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectGetResponse Clone() {
      return new ObjectGetResponse(this);
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 1;
    private global::ETModel.ObjectInfo item_;
    /// <summary>
    ///对象
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ETModel.ObjectInfo Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectGetResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectGetResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Item, other.Item)) return false;
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (item_ != null) hash ^= Item.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (item_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Item);
      }
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectGetResponse other) {
      if (other == null) {
        return;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::ETModel.ObjectInfo();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (item_ == null) {
              item_ = new global::ETModel.ObjectInfo();
            }
            input.ReadMessage(item_);
            break;
          }
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录
  /// </summary>
  public sealed partial class C2WEB_UserLogin : pb::IMessage<C2WEB_UserLogin> {
    private static readonly pb::MessageParser<C2WEB_UserLogin> _parser = new pb::MessageParser<C2WEB_UserLogin>(() => new C2WEB_UserLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2WEB_UserLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2WEB_UserLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2WEB_UserLogin(C2WEB_UserLogin other) : this() {
      userName_ = other.userName_;
      userPass_ = other.userPass_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2WEB_UserLogin Clone() {
      return new C2WEB_UserLogin(this);
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    ///帐号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserPass" field.</summary>
    public const int UserPassFieldNumber = 2;
    private string userPass_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserPass {
      get { return userPass_; }
      set {
        userPass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2WEB_UserLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2WEB_UserLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (UserPass != other.UserPass) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserPass.Length != 0) hash ^= UserPass.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (UserPass.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserPass);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserPass.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserPass);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2WEB_UserLogin other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserPass.Length != 0) {
        UserPass = other.UserPass;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            UserPass = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录返回
  /// </summary>
  public sealed partial class WEB2C_UserLogin : pb::IMessage<WEB2C_UserLogin> {
    private static readonly pb::MessageParser<WEB2C_UserLogin> _parser = new pb::MessageParser<WEB2C_UserLogin>(() => new WEB2C_UserLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WEB2C_UserLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WEB2C_UserLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WEB2C_UserLogin(WEB2C_UserLogin other) : this() {
      tag_ = other.tag_;
      accountId_ = other.accountId_;
      isCreateRole_ = other.isCreateRole_;
      timestamp_ = other.timestamp_;
      ip_ = other.ip_;
      port_ = other.port_;
      sign_ = other.sign_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WEB2C_UserLogin Clone() {
      return new WEB2C_UserLogin(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private int tag_;
    /// <summary>
    ///结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private int accountId_;
    /// <summary>
    ///帐号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "IsCreateRole" field.</summary>
    public const int IsCreateRoleFieldNumber = 3;
    private bool isCreateRole_;
    /// <summary>
    ///是否创建角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCreateRole {
      get { return isCreateRole_; }
      set {
        isCreateRole_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private long timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Ip" field.</summary>
    public const int IpFieldNumber = 5;
    private string ip_ = "";
    /// <summary>
    ///ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 6;
    private int port_;
    /// <summary>
    ///端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "Sign" field.</summary>
    public const int SignFieldNumber = 7;
    private string sign_ = "";
    /// <summary>
    ///签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WEB2C_UserLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WEB2C_UserLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (AccountId != other.AccountId) return false;
      if (IsCreateRole != other.IsCreateRole) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Sign != other.Sign) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (IsCreateRole != false) hash ^= IsCreateRole.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag);
      }
      if (AccountId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AccountId);
      }
      if (IsCreateRole != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCreateRole);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Port);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Sign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (IsCreateRole != false) {
        size += 1 + 1;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WEB2C_UserLogin other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.IsCreateRole != false) {
        IsCreateRole = other.IsCreateRole;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tag = input.ReadInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadInt32();
            break;
          }
          case 24: {
            IsCreateRole = input.ReadBool();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 42: {
            Ip = input.ReadString();
            break;
          }
          case 48: {
            Port = input.ReadInt32();
            break;
          }
          case 58: {
            Sign = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建角色
  /// </summary>
  public sealed partial class C2WEB_CreateRole : pb::IMessage<C2WEB_CreateRole> {
    private static readonly pb::MessageParser<C2WEB_CreateRole> _parser = new pb::MessageParser<C2WEB_CreateRole>(() => new C2WEB_CreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2WEB_CreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2WEB_CreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2WEB_CreateRole(C2WEB_CreateRole other) : this() {
      accountId_ = other.accountId_;
      roleName_ = other.roleName_;
      timestamp_ = other.timestamp_;
      sign_ = other.sign_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2WEB_CreateRole Clone() {
      return new C2WEB_CreateRole(this);
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private int accountId_;
    /// <summary>
    ///帐号Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "RoleName" field.</summary>
    public const int RoleNameFieldNumber = 2;
    private string roleName_ = "";
    /// <summary>
    ///角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Sign" field.</summary>
    public const int SignFieldNumber = 4;
    private string sign_ = "";
    /// <summary>
    ///签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2WEB_CreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2WEB_CreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (RoleName != other.RoleName) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Sign != other.Sign) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoleName);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2WEB_CreateRole other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
          case 18: {
            RoleName = input.ReadString();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 34: {
            Sign = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录返回
  /// </summary>
  public sealed partial class WEB2C_CreateRole : pb::IMessage<WEB2C_CreateRole> {
    private static readonly pb::MessageParser<WEB2C_CreateRole> _parser = new pb::MessageParser<WEB2C_CreateRole>(() => new WEB2C_CreateRole());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WEB2C_CreateRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WEB2C_CreateRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WEB2C_CreateRole(WEB2C_CreateRole other) : this() {
      tag_ = other.tag_;
      accountId_ = other.accountId_;
      isCreateRole_ = other.isCreateRole_;
      timestamp_ = other.timestamp_;
      ip_ = other.ip_;
      port_ = other.port_;
      sign_ = other.sign_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WEB2C_CreateRole Clone() {
      return new WEB2C_CreateRole(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private int tag_;
    /// <summary>
    ///结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private int accountId_;
    /// <summary>
    ///帐号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "IsCreateRole" field.</summary>
    public const int IsCreateRoleFieldNumber = 3;
    private bool isCreateRole_;
    /// <summary>
    ///是否创建角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCreateRole {
      get { return isCreateRole_; }
      set {
        isCreateRole_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private long timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "Ip" field.</summary>
    public const int IpFieldNumber = 5;
    private string ip_ = "";
    /// <summary>
    ///ip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 6;
    private int port_;
    /// <summary>
    ///端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 7;
    private string sign_ = "";
    /// <summary>
    ///签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WEB2C_CreateRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WEB2C_CreateRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (AccountId != other.AccountId) return false;
      if (IsCreateRole != other.IsCreateRole) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Sign != other.Sign) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (IsCreateRole != false) hash ^= IsCreateRole.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag);
      }
      if (AccountId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AccountId);
      }
      if (IsCreateRole != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCreateRole);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Port);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Sign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (IsCreateRole != false) {
        size += 1 + 1;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WEB2C_CreateRole other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.IsCreateRole != false) {
        IsCreateRole = other.IsCreateRole;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tag = input.ReadInt32();
            break;
          }
          case 16: {
            AccountId = input.ReadInt32();
            break;
          }
          case 24: {
            IsCreateRole = input.ReadBool();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 42: {
            Ip = input.ReadString();
            break;
          }
          case 48: {
            Port = input.ReadInt32();
            break;
          }
          case 58: {
            Sign = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录
  /// </summary>
  public sealed partial class C2S_UserLogin : pb::IMessage<C2S_UserLogin> {
    private static readonly pb::MessageParser<C2S_UserLogin> _parser = new pb::MessageParser<C2S_UserLogin>(() => new C2S_UserLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UserLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserLogin(C2S_UserLogin other) : this() {
      accountId_ = other.accountId_;
      timestamp_ = other.timestamp_;
      sign_ = other.sign_;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserLogin Clone() {
      return new C2S_UserLogin(this);
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private int accountId_;
    /// <summary>
    ///帐号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 3;
    private string sign_ = "";
    /// <summary>
    ///签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UserLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UserLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Sign != other.Sign) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sign);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UserLogin other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            Sign = input.ReadString();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录返回
  /// </summary>
  public sealed partial class S2C_UserLogin : pb::IMessage<S2C_UserLogin> {
    private static readonly pb::MessageParser<S2C_UserLogin> _parser = new pb::MessageParser<S2C_UserLogin>(() => new S2C_UserLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UserLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserLogin(S2C_UserLogin other) : this() {
      unitId_ = other.unitId_;
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserLogin Clone() {
      return new S2C_UserLogin(this);
    }

    /// <summary>Field number for the "UnitId" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private long unitId_;
    /// <summary>
    ///UnitID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UserLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UserLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitId != other.UnitId) return false;
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitId != 0L) hash ^= UnitId.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UserLogin other) {
      if (other == null) {
        return;
      }
      if (other.UnitId != 0L) {
        UnitId = other.UnitId;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///读取用户信息
  /// </summary>
  public sealed partial class SaveRoleInfo : pb::IMessage<SaveRoleInfo> {
    private static readonly pb::MessageParser<SaveRoleInfo> _parser = new pb::MessageParser<SaveRoleInfo>(() => new SaveRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SaveRoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveRoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveRoleInfo(SaveRoleInfo other) : this() {
      roleId_ = other.roleId_;
      roleData_ = other.roleData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SaveRoleInfo Clone() {
      return new SaveRoleInfo(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "RoleData" field.</summary>
    public const int RoleDataFieldNumber = 2;
    private pb::ByteString roleData_ = pb::ByteString.Empty;
    /// <summary>
    ///角色数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleData {
      get { return roleData_; }
      set {
        roleData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SaveRoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SaveRoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (RoleData != other.RoleData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (RoleData.Length != 0) hash ^= RoleData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (RoleData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (RoleData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SaveRoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.RoleData.Length != 0) {
        RoleData = other.RoleData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18: {
            RoleData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知用户信息发生变化
  /// </summary>
  public sealed partial class S2C_RoleInfo : pb::IMessage<S2C_RoleInfo> {
    private static readonly pb::MessageParser<S2C_RoleInfo> _parser = new pb::MessageParser<S2C_RoleInfo>(() => new S2C_RoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoleInfo(S2C_RoleInfo other) : this() {
      roleId_ = other.roleId_;
      attrInts_ = other.attrInts_.Clone();
      attrStrs_ = other.attrStrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoleInfo Clone() {
      return new S2C_RoleInfo(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "AttrInts" field.</summary>
    public const int AttrIntsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ETModel.AttrInt> _repeated_attrInts_codec
        = pb::FieldCodec.ForMessage(18, global::ETModel.AttrInt.Parser);
    private readonly pbc::RepeatedField<global::ETModel.AttrInt> attrInts_ = new pbc::RepeatedField<global::ETModel.AttrInt>();
    /// <summary>
    ///角色int属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ETModel.AttrInt> AttrInts {
      get { return attrInts_; }
    }

    /// <summary>Field number for the "AttrStrs" field.</summary>
    public const int AttrStrsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ETModel.AttrStr> _repeated_attrStrs_codec
        = pb::FieldCodec.ForMessage(26, global::ETModel.AttrStr.Parser);
    private readonly pbc::RepeatedField<global::ETModel.AttrStr> attrStrs_ = new pbc::RepeatedField<global::ETModel.AttrStr>();
    /// <summary>
    ///角色str属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ETModel.AttrStr> AttrStrs {
      get { return attrStrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if(!attrInts_.Equals(other.attrInts_)) return false;
      if(!attrStrs_.Equals(other.attrStrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      hash ^= attrInts_.GetHashCode();
      hash ^= attrStrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      attrInts_.WriteTo(output, _repeated_attrInts_codec);
      attrStrs_.WriteTo(output, _repeated_attrStrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += attrInts_.CalculateSize(_repeated_attrInts_codec);
      size += attrStrs_.CalculateSize(_repeated_attrStrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      attrInts_.Add(other.attrInts_);
      attrStrs_.Add(other.attrStrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18: {
            attrInts_.AddEntriesFrom(input, _repeated_attrInts_codec);
            break;
          }
          case 26: {
            attrStrs_.AddEntriesFrom(input, _repeated_attrStrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器心跳
  /// </summary>
  public sealed partial class ServerHeart : pb::IMessage<ServerHeart> {
    private static readonly pb::MessageParser<ServerHeart> _parser = new pb::MessageParser<ServerHeart>(() => new ServerHeart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerHeart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeart(ServerHeart other) : this() {
      serverId_ = other.serverId_;
      serverName_ = other.serverName_;
      ip_ = other.ip_;
      port_ = other.port_;
      online_ = other.online_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerHeart Clone() {
      return new ServerHeart(this);
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    /// <summary>
    ///服务器编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "ServerName" field.</summary>
    public const int ServerNameFieldNumber = 2;
    private string serverName_ = "";
    /// <summary>
    ///服务器名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    /// <summary>
    ///服务器IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    /// <summary>
    ///服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "Online" field.</summary>
    public const int OnlineFieldNumber = 5;
    private int online_;
    /// <summary>
    ///在线人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerHeart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerHeart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (ServerName != other.ServerName) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Online != other.Online) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Online != 0) hash ^= Online.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerName);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (Online != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Online);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Online);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerHeart other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Online != 0) {
        Online = other.Online;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 18: {
            ServerName = input.ReadString();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
          case 40: {
            Online = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册服务器
  /// </summary>
  public sealed partial class S2L_RegisterServer : pb::IMessage<S2L_RegisterServer> {
    private static readonly pb::MessageParser<S2L_RegisterServer> _parser = new pb::MessageParser<S2L_RegisterServer>(() => new S2L_RegisterServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2L_RegisterServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2L_RegisterServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2L_RegisterServer(S2L_RegisterServer other) : this() {
      Info = other.info_ != null ? other.Info.Clone() : null;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2L_RegisterServer Clone() {
      return new S2L_RegisterServer(this);
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::ETModel.ServerInfo info_;
    /// <summary>
    ///服务器信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ETModel.ServerInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2L_RegisterServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2L_RegisterServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2L_RegisterServer other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::ETModel.ServerInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETModel.ServerInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知地图服务器创建unit
  /// </summary>
  public sealed partial class G2M_CreateUnit : pb::IMessage<G2M_CreateUnit> {
    private static readonly pb::MessageParser<G2M_CreateUnit> _parser = new pb::MessageParser<G2M_CreateUnit>(() => new G2M_CreateUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2M_CreateUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2M_CreateUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2M_CreateUnit(G2M_CreateUnit other) : this() {
      accountId_ = other.accountId_;
      gateSessionId_ = other.gateSessionId_;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2M_CreateUnit Clone() {
      return new G2M_CreateUnit(this);
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private int accountId_;
    /// <summary>
    ///服务器信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "GateSessionId" field.</summary>
    public const int GateSessionIdFieldNumber = 2;
    private long gateSessionId_;
    /// <summary>
    ///网关sessionid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2M_CreateUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2M_CreateUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (GateSessionId != other.GateSessionId) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (GateSessionId != 0L) hash ^= GateSessionId.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GateSessionId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2M_CreateUnit other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.GateSessionId != 0L) {
        GateSessionId = other.GateSessionId;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
          case 16: {
            GateSessionId = input.ReadInt64();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知地图服务器创建unit
  /// </summary>
  public sealed partial class M2G_CreateUnit : pb::IMessage<M2G_CreateUnit> {
    private static readonly pb::MessageParser<M2G_CreateUnit> _parser = new pb::MessageParser<M2G_CreateUnit>(() => new M2G_CreateUnit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M2G_CreateUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M2G_CreateUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M2G_CreateUnit(M2G_CreateUnit other) : this() {
      unitId_ = other.unitId_;
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M2G_CreateUnit Clone() {
      return new M2G_CreateUnit(this);
    }

    /// <summary>Field number for the "UnitId" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private long unitId_;
    /// <summary>
    ///unit编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M2G_CreateUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M2G_CreateUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitId != other.UnitId) return false;
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitId != 0L) hash ^= UnitId.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UnitId);
      }
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnitId);
      }
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M2G_CreateUnit other) {
      if (other == null) {
        return;
      }
      if (other.UnitId != 0L) {
        UnitId = other.UnitId;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UnitId = input.ReadInt64();
            break;
          }
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取指定类型map 的地址
  /// </summary>
  public sealed partial class G2L_GetMapAddress : pb::IMessage<G2L_GetMapAddress> {
    private static readonly pb::MessageParser<G2L_GetMapAddress> _parser = new pb::MessageParser<G2L_GetMapAddress>(() => new G2L_GetMapAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_GetMapAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetMapAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetMapAddress(G2L_GetMapAddress other) : this() {
      mapType_ = other.mapType_;
      rpcId_ = other.rpcId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetMapAddress Clone() {
      return new G2L_GetMapAddress(this);
    }

    /// <summary>Field number for the "MapType" field.</summary>
    public const int MapTypeFieldNumber = 1;
    private int mapType_;
    /// <summary>
    ///map类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapType {
      get { return mapType_; }
      set {
        mapType_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_GetMapAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_GetMapAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapType != other.MapType) return false;
      if (RpcId != other.RpcId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapType != 0) hash ^= MapType.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapType);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapType);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_GetMapAddress other) {
      if (other == null) {
        return;
      }
      if (other.MapType != 0) {
        MapType = other.MapType;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapType = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知地图服务器创建unit
  /// </summary>
  public sealed partial class L2G_GetMapAddress : pb::IMessage<L2G_GetMapAddress> {
    private static readonly pb::MessageParser<L2G_GetMapAddress> _parser = new pb::MessageParser<L2G_GetMapAddress>(() => new L2G_GetMapAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_GetMapAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetMapAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetMapAddress(L2G_GetMapAddress other) : this() {
      address_ = other.address_;
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetMapAddress Clone() {
      return new L2G_GetMapAddress(this);
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    ///地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_GetMapAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_GetMapAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_GetMapAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户进入房间
  /// </summary>
  public sealed partial class C2M_EnterRoom : pb::IMessage<C2M_EnterRoom> {
    private static readonly pb::MessageParser<C2M_EnterRoom> _parser = new pb::MessageParser<C2M_EnterRoom>(() => new C2M_EnterRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2M_EnterRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2M_EnterRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2M_EnterRoom(C2M_EnterRoom other) : this() {
      roomType_ = other.roomType_;
      roomId_ = other.roomId_;
      rpcId_ = other.rpcId_;
      actorId_ = other.actorId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2M_EnterRoom Clone() {
      return new C2M_EnterRoom(this);
    }

    /// <summary>Field number for the "RoomType" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private int roomType_;
    /// <summary>
    ///房间类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    /// <summary>Field number for the "RoomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private int roomId_;
    /// <summary>
    ///房间编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "ActorId" field.</summary>
    public const int ActorIdFieldNumber = 100;
    private long actorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2M_EnterRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2M_EnterRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomType != other.RoomType) return false;
      if (RoomId != other.RoomId) return false;
      if (RpcId != other.RpcId) return false;
      if (ActorId != other.ActorId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomType != 0) hash ^= RoomType.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (ActorId != 0L) hash ^= ActorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomType);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(ActorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2M_EnterRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomType != 0) {
        RoomType = other.RoomType;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.ActorId != 0L) {
        ActorId = other.ActorId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomType = input.ReadInt32();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 800: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户进入房间
  /// </summary>
  public sealed partial class M2C_EnterRoom : pb::IMessage<M2C_EnterRoom> {
    private static readonly pb::MessageParser<M2C_EnterRoom> _parser = new pb::MessageParser<M2C_EnterRoom>(() => new M2C_EnterRoom());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M2C_EnterRoom> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M2C_EnterRoom() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M2C_EnterRoom(M2C_EnterRoom other) : this() {
      roomId_ = other.roomId_;
      tag_ = other.tag_;
      rpcId_ = other.rpcId_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M2C_EnterRoom Clone() {
      return new M2C_EnterRoom(this);
    }

    /// <summary>Field number for the "RoomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    /// <summary>
    ///房间编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 98;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "Message" field.</summary>
    public const int MessageFieldNumber = 100;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M2C_EnterRoom);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M2C_EnterRoom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      if (Tag != other.Tag) return false;
      if (RpcId != other.RpcId) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (Tag != 0) {
        output.WriteRawTag(144, 6);
        output.WriteInt32(Tag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(162, 6);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (Tag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M2C_EnterRoom other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
          case 784: {
            Tag = input.ReadInt32();
            break;
          }
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 802: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///釋放unit
  /// </summary>
  public sealed partial class G2M_UnitDispose : pb::IMessage<G2M_UnitDispose> {
    private static readonly pb::MessageParser<G2M_UnitDispose> _parser = new pb::MessageParser<G2M_UnitDispose>(() => new G2M_UnitDispose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2M_UnitDispose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ETModel.GameProtoReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2M_UnitDispose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2M_UnitDispose(G2M_UnitDispose other) : this() {
      rpcId_ = other.rpcId_;
      actorId_ = other.actorId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2M_UnitDispose Clone() {
      return new G2M_UnitDispose(this);
    }

    /// <summary>Field number for the "RpcId" field.</summary>
    public const int RpcIdFieldNumber = 99;
    private int rpcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    /// <summary>Field number for the "ActorId" field.</summary>
    public const int ActorIdFieldNumber = 100;
    private long actorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2M_UnitDispose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2M_UnitDispose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcId != other.RpcId) return false;
      if (ActorId != other.ActorId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcId != 0) hash ^= RpcId.GetHashCode();
      if (ActorId != 0L) hash ^= ActorId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(152, 6);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(160, 6);
        output.WriteInt64(ActorId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2M_UnitDispose other) {
      if (other == null) {
        return;
      }
      if (other.RpcId != 0) {
        RpcId = other.RpcId;
      }
      if (other.ActorId != 0L) {
        ActorId = other.ActorId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 792: {
            RpcId = input.ReadInt32();
            break;
          }
          case 800: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
