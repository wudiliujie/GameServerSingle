// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProto.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ML {

  /// <summary>Holder for reflection information generated from GameProto.proto</summary>
  public static partial class GameProtoReflection {

    #region Descriptor
    /// <summary>File descriptor for GameProto.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameProtoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9HYW1lUHJvdG8ucHJvdG8SAk1MIh8KB0F0dHJJbnQSCQoBSxgBIAEoBRIJ",
            "CgFWGAIgASgDIh8KB0F0dHJTdHISCQoBSxgBIAEoBRIJCgFWGAIgASgJIloK",
            "ClJvbGVEYkluZm8SDgoGUm9sZUlkGAEgASgFEh0KCEF0dHJJbnRzGAIgAygL",
            "MgsuTUwuQXR0ckludBIdCghBdHRyU3RycxgDIAMoCzILLk1MLkF0dHJTdHIi",
            "QwoNQzJTX1VzZXJMb2dpbhIRCglBY2NvdW50SWQYASABKAUSEQoJVGltZXN0",
            "YW1wGAIgASgDEgwKBHNpZ24YAyABKAkiHAoNUzJDX1VzZXJMb2dpbhILCgN0",
            "YWcYASABKAUiIgoQUzJEX1JlYWRSb2xlSW5mbxIOCgZSb2xlSWQYASABKAUi",
            "UwoQRDJTX1JlYWRSb2xlSW5mbxILCgN0YWcYASABKAUSDgoGUm9sZUlkGAIg",
            "ASgFEhAKCFJvbGVOYW1lGAMgASgJEhAKCFJvbGVEYXRhGAQgASgMIjQKEFMy",
            "RF9TYXZlUm9sZUluZm8SDgoGUm9sZUlkGAEgASgFEhAKCFJvbGVEYXRhGAIg",
            "ASgMIlwKDFMyQ19Sb2xlSW5mbxIOCgZSb2xlSWQYASABKAUSHQoIQXR0cklu",
            "dHMYAiADKAsyCy5NTC5BdHRySW50Eh0KCEF0dHJTdHJzGAMgAygLMgsuTUwu",
            "QXR0clN0ciJjChFTMldFQl9TZXJ2ZXJIZWFydBIQCghTZXJ2ZXJJZBgBIAEo",
            "BRISCgpTZXJ2ZXJOYW1lGAIgASgJEgoKAklwGAMgASgJEgwKBFBvcnQYBCAB",
            "KAUSDgoGT25saW5lGAUgASgFKqsBCgNNU0cSDAoIX0RlZmF1bHQQABISCg5f",
            "QzJTX1VzZXJMb2dpbhAFEhIKDl9TMkNfVXNlckxvZ2luEAYSFQoRX1MyRF9S",
            "ZWFkUm9sZUluZm8QBxIVChFfRDJTX1JlYWRSb2xlSW5mbxAIEhUKEV9TMkRf",
            "U2F2ZVJvbGVJbmZvEAkSEQoNX1MyQ19Sb2xlSW5mbxAKEhYKEl9TMldFQl9T",
            "ZXJ2ZXJIZWFydBALYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ML.MSG), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.AttrInt), global::ML.AttrInt.Parser, new[]{ "K", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.AttrStr), global::ML.AttrStr.Parser, new[]{ "K", "V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.RoleDbInfo), global::ML.RoleDbInfo.Parser, new[]{ "RoleId", "AttrInts", "AttrStrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.C2S_UserLogin), global::ML.C2S_UserLogin.Parser, new[]{ "AccountId", "Timestamp", "Sign" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.S2C_UserLogin), global::ML.S2C_UserLogin.Parser, new[]{ "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.S2D_ReadRoleInfo), global::ML.S2D_ReadRoleInfo.Parser, new[]{ "RoleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.D2S_ReadRoleInfo), global::ML.D2S_ReadRoleInfo.Parser, new[]{ "Tag", "RoleId", "RoleName", "RoleData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.S2D_SaveRoleInfo), global::ML.S2D_SaveRoleInfo.Parser, new[]{ "RoleId", "RoleData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.S2C_RoleInfo), global::ML.S2C_RoleInfo.Parser, new[]{ "RoleId", "AttrInts", "AttrStrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ML.S2WEB_ServerHeart), global::ML.S2WEB_ServerHeart.Parser, new[]{ "ServerId", "ServerName", "Ip", "Port", "Online" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MSG {
    [pbr::OriginalName("_Default")] Default = 0,
    /// <summary>
    ///用户登录
    /// </summary>
    [pbr::OriginalName("_C2S_UserLogin")] C2SUserLogin = 5,
    /// <summary>
    ///用户登录返回
    /// </summary>
    [pbr::OriginalName("_S2C_UserLogin")] S2CUserLogin = 6,
    /// <summary>
    ///读取用户信息
    /// </summary>
    [pbr::OriginalName("_S2D_ReadRoleInfo")] S2DReadRoleInfo = 7,
    /// <summary>
    ///读取用户信息
    /// </summary>
    [pbr::OriginalName("_D2S_ReadRoleInfo")] D2SReadRoleInfo = 8,
    /// <summary>
    ///读取用户信息
    /// </summary>
    [pbr::OriginalName("_S2D_SaveRoleInfo")] S2DSaveRoleInfo = 9,
    /// <summary>
    ///通知用户信息发生变化
    /// </summary>
    [pbr::OriginalName("_S2C_RoleInfo")] S2CRoleInfo = 10,
    /// <summary>
    ///服务器心跳
    /// </summary>
    [pbr::OriginalName("_S2WEB_ServerHeart")] S2WebServerHeart = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  ///int属性
  /// </summary>
  public sealed partial class AttrInt : pb::IMessage<AttrInt> {
    private static readonly pb::MessageParser<AttrInt> _parser = new pb::MessageParser<AttrInt>(() => new AttrInt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInt(AttrInt other) : this() {
      k_ = other.k_;
      v_ = other.v_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrInt Clone() {
      return new AttrInt(this);
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 1;
    private int k_;
    /// <summary>
    ///key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "V" field.</summary>
    public const int VFieldNumber = 2;
    private long v_;
    /// <summary>
    ///值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (K != other.K) return false;
      if (V != other.V) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (K != 0) hash ^= K.GetHashCode();
      if (V != 0L) hash ^= V.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (K != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(K);
      }
      if (V != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(V);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (V != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(V);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrInt other) {
      if (other == null) {
        return;
      }
      if (other.K != 0) {
        K = other.K;
      }
      if (other.V != 0L) {
        V = other.V;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            K = input.ReadInt32();
            break;
          }
          case 16: {
            V = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///str属性
  /// </summary>
  public sealed partial class AttrStr : pb::IMessage<AttrStr> {
    private static readonly pb::MessageParser<AttrStr> _parser = new pb::MessageParser<AttrStr>(() => new AttrStr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrStr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrStr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrStr(AttrStr other) : this() {
      k_ = other.k_;
      v_ = other.v_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrStr Clone() {
      return new AttrStr(this);
    }

    /// <summary>Field number for the "K" field.</summary>
    public const int KFieldNumber = 1;
    private int k_;
    /// <summary>
    ///key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "V" field.</summary>
    public const int VFieldNumber = 2;
    private string v_ = "";
    /// <summary>
    ///值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string V {
      get { return v_; }
      set {
        v_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrStr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrStr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (K != other.K) return false;
      if (V != other.V) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (K != 0) hash ^= K.GetHashCode();
      if (V.Length != 0) hash ^= V.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (K != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(K);
      }
      if (V.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(V);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (K != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(K);
      }
      if (V.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(V);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrStr other) {
      if (other == null) {
        return;
      }
      if (other.K != 0) {
        K = other.K;
      }
      if (other.V.Length != 0) {
        V = other.V;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            K = input.ReadInt32();
            break;
          }
          case 18: {
            V = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色数据存储信息
  /// </summary>
  public sealed partial class RoleDbInfo : pb::IMessage<RoleDbInfo> {
    private static readonly pb::MessageParser<RoleDbInfo> _parser = new pb::MessageParser<RoleDbInfo>(() => new RoleDbInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleDbInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDbInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDbInfo(RoleDbInfo other) : this() {
      roleId_ = other.roleId_;
      attrInts_ = other.attrInts_.Clone();
      attrStrs_ = other.attrStrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleDbInfo Clone() {
      return new RoleDbInfo(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "AttrInts" field.</summary>
    public const int AttrIntsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ML.AttrInt> _repeated_attrInts_codec
        = pb::FieldCodec.ForMessage(18, global::ML.AttrInt.Parser);
    private readonly pbc::RepeatedField<global::ML.AttrInt> attrInts_ = new pbc::RepeatedField<global::ML.AttrInt>();
    /// <summary>
    ///角色int属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ML.AttrInt> AttrInts {
      get { return attrInts_; }
    }

    /// <summary>Field number for the "AttrStrs" field.</summary>
    public const int AttrStrsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ML.AttrStr> _repeated_attrStrs_codec
        = pb::FieldCodec.ForMessage(26, global::ML.AttrStr.Parser);
    private readonly pbc::RepeatedField<global::ML.AttrStr> attrStrs_ = new pbc::RepeatedField<global::ML.AttrStr>();
    /// <summary>
    ///角色int属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ML.AttrStr> AttrStrs {
      get { return attrStrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleDbInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleDbInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if(!attrInts_.Equals(other.attrInts_)) return false;
      if(!attrStrs_.Equals(other.attrStrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      hash ^= attrInts_.GetHashCode();
      hash ^= attrStrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      attrInts_.WriteTo(output, _repeated_attrInts_codec);
      attrStrs_.WriteTo(output, _repeated_attrStrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += attrInts_.CalculateSize(_repeated_attrInts_codec);
      size += attrStrs_.CalculateSize(_repeated_attrStrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleDbInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      attrInts_.Add(other.attrInts_);
      attrStrs_.Add(other.attrStrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18: {
            attrInts_.AddEntriesFrom(input, _repeated_attrInts_codec);
            break;
          }
          case 26: {
            attrStrs_.AddEntriesFrom(input, _repeated_attrStrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录
  /// </summary>
  public sealed partial class C2S_UserLogin : pb::IMessage<C2S_UserLogin> {
    private static readonly pb::MessageParser<C2S_UserLogin> _parser = new pb::MessageParser<C2S_UserLogin>(() => new C2S_UserLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UserLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserLogin(C2S_UserLogin other) : this() {
      accountId_ = other.accountId_;
      timestamp_ = other.timestamp_;
      sign_ = other.sign_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UserLogin Clone() {
      return new C2S_UserLogin(this);
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private int accountId_;
    /// <summary>
    ///帐号ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AccountId {
      get { return accountId_; }
      set {
        accountId_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private long timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 3;
    private string sign_ = "";
    /// <summary>
    ///签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UserLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UserLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Sign != other.Sign) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId != 0) hash ^= AccountId.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AccountId);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sign);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountId);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UserLogin other) {
      if (other == null) {
        return;
      }
      if (other.AccountId != 0) {
        AccountId = other.AccountId;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AccountId = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            Sign = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户登录返回
  /// </summary>
  public sealed partial class S2C_UserLogin : pb::IMessage<S2C_UserLogin> {
    private static readonly pb::MessageParser<S2C_UserLogin> _parser = new pb::MessageParser<S2C_UserLogin>(() => new S2C_UserLogin());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UserLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserLogin(S2C_UserLogin other) : this() {
      tag_ = other.tag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UserLogin Clone() {
      return new S2C_UserLogin(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private int tag_;
    /// <summary>
    ///结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UserLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UserLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UserLogin other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tag = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///读取用户信息
  /// </summary>
  public sealed partial class S2D_ReadRoleInfo : pb::IMessage<S2D_ReadRoleInfo> {
    private static readonly pb::MessageParser<S2D_ReadRoleInfo> _parser = new pb::MessageParser<S2D_ReadRoleInfo>(() => new S2D_ReadRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2D_ReadRoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[5]; }
    }
        public int Error { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        public string Message { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        public int RpcId { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2D_ReadRoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2D_ReadRoleInfo(S2D_ReadRoleInfo other) : this() {
      roleId_ = other.roleId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2D_ReadRoleInfo Clone() {
      return new S2D_ReadRoleInfo(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2D_ReadRoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2D_ReadRoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2D_ReadRoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }
 
  /// <summary>
  ///读取用户信息
  /// </summary>
  public sealed partial class D2S_ReadRoleInfo : pb::IMessage<D2S_ReadRoleInfo> {
    private static readonly pb::MessageParser<D2S_ReadRoleInfo> _parser = new pb::MessageParser<D2S_ReadRoleInfo>(() => new D2S_ReadRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<D2S_ReadRoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public D2S_ReadRoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public D2S_ReadRoleInfo(D2S_ReadRoleInfo other) : this() {
      tag_ = other.tag_;
      roleId_ = other.roleId_;
      roleName_ = other.roleName_;
      roleData_ = other.roleData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public D2S_ReadRoleInfo Clone() {
      return new D2S_ReadRoleInfo(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private int tag_;
    /// <summary>
    ///结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 2;
    private int roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "RoleName" field.</summary>
    public const int RoleNameFieldNumber = 3;
    private string roleName_ = "";
    /// <summary>
    ///角色名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RoleData" field.</summary>
    public const int RoleDataFieldNumber = 4;
    private pb::ByteString roleData_ = pb::ByteString.Empty;
    /// <summary>
    ///角色数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleData {
      get { return roleData_; }
      set {
        roleData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as D2S_ReadRoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(D2S_ReadRoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      if (RoleId != other.RoleId) return false;
      if (RoleName != other.RoleName) return false;
      if (RoleData != other.RoleData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      if (RoleData.Length != 0) hash ^= RoleData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Tag);
      }
      if (RoleId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoleId);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoleName);
      }
      if (RoleData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RoleData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (RoleData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(D2S_ReadRoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
      if (other.RoleData.Length != 0) {
        RoleData = other.RoleData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Tag = input.ReadInt32();
            break;
          }
          case 16: {
            RoleId = input.ReadInt32();
            break;
          }
          case 26: {
            RoleName = input.ReadString();
            break;
          }
          case 34: {
            RoleData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///读取用户信息
  /// </summary>
  public sealed partial class S2D_SaveRoleInfo : pb::IMessage<S2D_SaveRoleInfo> {
    private static readonly pb::MessageParser<S2D_SaveRoleInfo> _parser = new pb::MessageParser<S2D_SaveRoleInfo>(() => new S2D_SaveRoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2D_SaveRoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2D_SaveRoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2D_SaveRoleInfo(S2D_SaveRoleInfo other) : this() {
      roleId_ = other.roleId_;
      roleData_ = other.roleData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2D_SaveRoleInfo Clone() {
      return new S2D_SaveRoleInfo(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "RoleData" field.</summary>
    public const int RoleDataFieldNumber = 2;
    private pb::ByteString roleData_ = pb::ByteString.Empty;
    /// <summary>
    ///角色数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RoleData {
      get { return roleData_; }
      set {
        roleData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2D_SaveRoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2D_SaveRoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if (RoleData != other.RoleData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      if (RoleData.Length != 0) hash ^= RoleData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      if (RoleData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RoleData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      if (RoleData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RoleData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2D_SaveRoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      if (other.RoleData.Length != 0) {
        RoleData = other.RoleData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18: {
            RoleData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通知用户信息发生变化
  /// </summary>
  public sealed partial class S2C_RoleInfo : pb::IMessage<S2C_RoleInfo> {
    private static readonly pb::MessageParser<S2C_RoleInfo> _parser = new pb::MessageParser<S2C_RoleInfo>(() => new S2C_RoleInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_RoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoleInfo(S2C_RoleInfo other) : this() {
      roleId_ = other.roleId_;
      attrInts_ = other.attrInts_.Clone();
      attrStrs_ = other.attrStrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_RoleInfo Clone() {
      return new S2C_RoleInfo(this);
    }

    /// <summary>Field number for the "RoleId" field.</summary>
    public const int RoleIdFieldNumber = 1;
    private int roleId_;
    /// <summary>
    ///角色编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleId {
      get { return roleId_; }
      set {
        roleId_ = value;
      }
    }

    /// <summary>Field number for the "AttrInts" field.</summary>
    public const int AttrIntsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ML.AttrInt> _repeated_attrInts_codec
        = pb::FieldCodec.ForMessage(18, global::ML.AttrInt.Parser);
    private readonly pbc::RepeatedField<global::ML.AttrInt> attrInts_ = new pbc::RepeatedField<global::ML.AttrInt>();
    /// <summary>
    ///角色int属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ML.AttrInt> AttrInts {
      get { return attrInts_; }
    }

    /// <summary>Field number for the "AttrStrs" field.</summary>
    public const int AttrStrsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ML.AttrStr> _repeated_attrStrs_codec
        = pb::FieldCodec.ForMessage(26, global::ML.AttrStr.Parser);
    private readonly pbc::RepeatedField<global::ML.AttrStr> attrStrs_ = new pbc::RepeatedField<global::ML.AttrStr>();
    /// <summary>
    ///角色str属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ML.AttrStr> AttrStrs {
      get { return attrStrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_RoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_RoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoleId != other.RoleId) return false;
      if(!attrInts_.Equals(other.attrInts_)) return false;
      if(!attrStrs_.Equals(other.attrStrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoleId != 0) hash ^= RoleId.GetHashCode();
      hash ^= attrInts_.GetHashCode();
      hash ^= attrStrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoleId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoleId);
      }
      attrInts_.WriteTo(output, _repeated_attrInts_codec);
      attrStrs_.WriteTo(output, _repeated_attrStrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleId);
      }
      size += attrInts_.CalculateSize(_repeated_attrInts_codec);
      size += attrStrs_.CalculateSize(_repeated_attrStrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_RoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.RoleId != 0) {
        RoleId = other.RoleId;
      }
      attrInts_.Add(other.attrInts_);
      attrStrs_.Add(other.attrStrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoleId = input.ReadInt32();
            break;
          }
          case 18: {
            attrInts_.AddEntriesFrom(input, _repeated_attrInts_codec);
            break;
          }
          case 26: {
            attrStrs_.AddEntriesFrom(input, _repeated_attrStrs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器心跳
  /// </summary>
  public sealed partial class S2WEB_ServerHeart : pb::IMessage<S2WEB_ServerHeart> {
    private static readonly pb::MessageParser<S2WEB_ServerHeart> _parser = new pb::MessageParser<S2WEB_ServerHeart>(() => new S2WEB_ServerHeart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2WEB_ServerHeart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ML.GameProtoReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2WEB_ServerHeart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2WEB_ServerHeart(S2WEB_ServerHeart other) : this() {
      serverId_ = other.serverId_;
      serverName_ = other.serverName_;
      ip_ = other.ip_;
      port_ = other.port_;
      online_ = other.online_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2WEB_ServerHeart Clone() {
      return new S2WEB_ServerHeart(this);
    }

    /// <summary>Field number for the "ServerId" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private int serverId_;
    /// <summary>
    ///服务器编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "ServerName" field.</summary>
    public const int ServerNameFieldNumber = 2;
    private string serverName_ = "";
    /// <summary>
    ///服务器名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerName {
      get { return serverName_; }
      set {
        serverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Ip" field.</summary>
    public const int IpFieldNumber = 3;
    private string ip_ = "";
    /// <summary>
    ///服务器IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    /// <summary>
    ///服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "Online" field.</summary>
    public const int OnlineFieldNumber = 5;
    private int online_;
    /// <summary>
    ///在线人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2WEB_ServerHeart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2WEB_ServerHeart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      if (ServerName != other.ServerName) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (Online != other.Online) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (ServerName.Length != 0) hash ^= ServerName.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Online != 0) hash ^= Online.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ServerId);
      }
      if (ServerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerName);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (Online != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Online);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (ServerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerName);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Online);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2WEB_ServerHeart other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.ServerName.Length != 0) {
        ServerName = other.ServerName;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Online != 0) {
        Online = other.Online;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ServerId = input.ReadInt32();
            break;
          }
          case 18: {
            ServerName = input.ReadString();
            break;
          }
          case 26: {
            Ip = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
          case 40: {
            Online = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
